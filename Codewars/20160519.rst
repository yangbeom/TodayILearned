Validate Credit Card Number
===========================

In this Kata, you will implement The Luhn Algorithm, which is used to help validate credit card numbers.

Given a positive integer of up to 16 digits, return true if it is a valid credit card number, and false if it is not.

Here is the algorithm:

1. If there are an even number of digits, double every other digit starting with the first,
and if there are an odd number of digits, double every other digit starting with the second.
Another way to think about it is, from the right to left, double every other digit starting with the second to last digit.
::

    1714 => [1*, 7, 1*, 4] => [2, 7, 2, 4]

    12345 => [1, 2*, 3, 4*, 5] => [1, 4, 3, 8, 5]

    891 => [8, 9*, 1] => [8, 18, 1]
2. If a resulting doubled number is greater than 9, replace it with either the sum of it's own digits, or 9 subtracted from it.
::

    [8, 18*, 1] => [8, (1+8), 1] => [8, 9, 1]

    (or)

    [8, 18*, 1] => [8, (18-9), 1] => [8, 9, 1]

3. Sum all of the final digits
::

    [8, 9, 1] => 8+9+1 => 18

4. Finally, take that sum and divide it by 10. If the remainder equals zero, the original credit card number is valid.
::

    18 (modulus) 10 => 8.

    8 does not equal 0, so 891 is not a valid credit card number.

.. code-block:: python

    def validate(n):
        digits = [int(x) for x in str(n)]
        for x in xrange(len(digits)-2, -1, -2):
            digits[x] = sum(map(int, str(digits[x] * 2)))
        return sum(digits) % 10 == 0

.. code-block:: python

    def validate(n):
        digits = [int(x) for x in list(str(n))];
        for i in range(len(digits) - 2, -1, -2):
            digits[i] = digits[i] * 2
            if digits[i] > 9:
                digits[i] = (digits[i] / 10) + (digits[i] % 10)

        return sum(digits) % 10 == 0

다음은 best practice 1등과 2등의 소스이다.

1등소스의 map(int,str(digits[x]*2))를 왜 사용했는지 정확한 의미를 모르겠다.

왜 다시 str로 만들었다가 int형으로 만들어 합하는지....

일단 나는 문자열의 길이를 구하여 홀수 짝수를 구분

홀수일땐 짝수위치에 있는 숫자를 2배 짝수일땐 홀수위치에 있는 숫자를 2배 하여 합을 구하였다.

range함수를 이용하여 홀짝 구분없이 사용하는 방법을 알게되었다.