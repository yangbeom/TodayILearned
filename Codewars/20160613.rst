Strings Mix
===========

Given two strings s1 and s2, we want to visualize how different the two strings are. We will only take into account the lowercase letters (a to z). First let us count the frequency of each lowercase letters in s1 and s2.

`s1 = "A aaaa bb c"`

`s2 = "& aaa bbb c d"`

`s1 has 4 'a', 2 'b', 1 'c'`

`s2 has 3 'a', 3 'b', 1 'c', 1 'd'`

So the maximum for 'a' in s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2. In the following we will not consider letters when the maximum of their occurrences is less than or equal to 1.

We can resume the differences between s1 and s2 in the following string: `"1:aaaa/2:bbb"` where `1` in `1:aaaa` stands for string s1 and `aaaa` because the maximum for `a` is 4. In the same manner `2:bbb` stands for string s2 and `bbb` because the maximum for `b` is 3.

The task is to produce a string in which each lowercase letters of s1 or s2 appears as many times as its maximum if this maximum is strictly greater than 1; these letters will be prefixed by the number of the string where they appear with their maximum value and `:`. If the maximum is in s1 as well as in s2 the prefix is `=:`.

In the result, substrings will be in decreasing order of their length and when they have the same length sorted alphabetically (more precisely sorted by codepoint); the different groups will be separated by '/'.

Hopefully other examples can make this clearer.
::

    s1 = "my&friend&Paul has heavy hats! &"
    s2 = "my friend John has many many friends &"
    mix(s1, s2) --> "2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"

    s1 = "mmmmm m nnnnn y&friend&Paul has heavy hats! &"
    s2 = "my frie n d Joh n has ma n y ma n y frie n ds n&"
    mix(s1, s2) --> "1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss"

    s1="Are the kids at home? aaaaa fffff"
    s2="Yes they are here! aaaaa fffff"
    mix(s1, s2) --> "=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh"

이번 문제는 다들 비슷비슷한데 뭐가 더 효율이 좋은방법인지는 잘모르겠다.

우선 나는 다음과 같이 만들었다.

.. code-block:: python

    def mix(s1, s2):
        # your code
        s1_dict = {x:s1.count(x) for x in s1 if x.islower()}
        s2_dict = {x:s2.count(x) for x in s2 if x.islower()}
        result = {i:(s1_dict[i] if i in s1_dict.keys() else 0 ,s2_dict[i] if i in s2_dict.keys() else 0) for i in set(s1_dict)|set(s2_dict)}
        result = [("=:",i*max(result[i])) if result[i][0] == result[i][1] else ("1:",i*max(result[i])) if max(result[i]) == result[i][0] else ("2:",i*max(result[i])) for i in result]
        result = sorted(sorted([i[0]+i[1] for i in sorted(result,key=lambda x : x[0])]),key=len,reverse=True)
        return "/".join(x for x in result if len(x)>3)

문자열중 소문자의 알파벳을 key로하고 그값을 dict형으로 넣었다
그후 set으로 key값을 합쳐 각각 갯수를 tuple로 합쳐 추가후 max로 많은쪽을 가져와 출력하는것
sort에 sort에 sort를 짧게 바꿀수 있을거 같으나 아직은 잘 떠오르지 않는다.

