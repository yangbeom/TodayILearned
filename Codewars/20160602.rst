Vector class
============
Create a Vector object that supports addition, subtraction, dot products, and norms. So, for example:
::

    a = Vector([1,2,3])
    b = Vector([3,4,5])
    c = Vector([5,6,7,8])
    a.add(b) # should return Vector([4,6,8])
    a.subtract(b) # should return Vector([-2,-2,-2])
    a.dot(b) # should return 1*3+2*4+3*5 = 26
    a.norm() # should return sqrt(1^2+2^2+3^2)=sqrt(14)
    a.add(c) # raises an exception
If you try to add, subtract, or dot two vectors with different lengths, you must throw an error!

Also provide:

- a toString function, so that using the vectors from above, a.toString() === '(1,2,3)' (in Python, this is a __str__ method, so that str(a) == '(1,2,3)')
- an equals function, so that two vectors who have the same components are equal

The test cases will utilize the user-provided equals method.

.. code-block:: python

    from math import sqrt

    class Vector():
        def __init__(self,object):
            self.object = object

        def add(self,addVector):
            return Vector([self.object[i]+addVector.object[i] for i in range(len(self.object))])

        def subtract(self,subVector):
            return Vector([self.object[0] - subVector.object[0], self.object[1] - subVector.object[1], self.object[2] - subVector.object[2]])

        def dot(self,dotVector):
            return self.object[0] * dotVector.object[0]+self.object[1] * dotVector.object[1]+self.object[2] * dotVector.object[2]

        def norm(self):
            return sqrt(self.object[0]**2+self.object[1]**2+self.object[2]**2)

        def __str__(self):
            return str(tuple(self.object)).replace(' ','')

        def equals(self,VectorObject):
            if self.object == VectorObject.object:
                return True
            else:
                return False

Vector 의 합,차 등을 계산하는 문제

codewars에서 처음 만나는 class를 만드는 문제였다.

그래서 딱딱 값으로 test 값에 맞춰서 만들었는데
bestsolution 을 보니 test값에 맞춘게 아닌 그냥 전반적으로 쓸수 있는 class를 만드는것 같았다.

다음부터는 test값에만 맞춰서 짜지 말고 전반적으로 쓸수있는 class or function을 만들어야겠다.