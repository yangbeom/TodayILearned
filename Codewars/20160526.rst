Sum of Digits / Digital Root
============================
Description:

In this kata, you must create a digital root function.

A digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has two digits, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.

Here's how it works (Ruby example given): ::

    digital_root(16)
    => 1 + 6
    => 7

    digital_root(942)
    => 9 + 4 + 2
    => 15 ...
    => 1 + 5
    => 6

    digital_root(132189)
    => 1 + 3 + 2 + 1 + 8 + 9
    => 24 ...
    => 2 + 4
    => 6

    digital_root(493193)
    => 4 + 9 + 3 + 1 + 9 + 3
    => 29 ...
    => 2 + 9
    => 11 ...
    => 1 + 1
    => 2

각 자리의 숫자를 합하여 한자리의 숫자로 나타내는 문제이다.

.. code-block:: python

    def digital_root(n):
    # ...
    if len(str(n))>1:
        return digital_root(sum([int(n) for n in str(n)]))
    else:
        return n

라고 소스를 짰다.

bestpractice로 나온 소스는 다음과 같다.

.. code-block:: python

    def digital_root(n):
        return n if n < 10 else digital_root(sum(map(int,str(n))))
다른건 다 비슷한데 map함수를 사용하여 계산을 했다.
map함수는 function과 iterable을 넣어 함수에 iterable을 넣어 list로 반환하는 함수이다.
즉 [int(x) for x in str(n)] 과  map(int,str(n))과 같은 기능을 한다는것이이다.

