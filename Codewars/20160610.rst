Josephus problem
================

Josephus Survivor
-----------------
In this kata you have to correctly return who is the "survivor", ie: the last element of a Josephus permutation.

Basically you have to assume that n people are put into a circle and that they are eliminated in steps of k elements, like this:

josephus_survivor(7,3) => means 7 people in a circle;
one every 3 is eliminated until one remains
::

    [1,2,3,4,5,6,7] - initial sequence
    [1,2,4,5,6,7] => 3 is counted out
    [1,2,4,5,7] => 6 is counted out
    [1,4,5,7] => 2 is counted out
    [1,4,5] => 7 is counted out
    [1,4] => 5 is counted out
    [4] => 1 counted out, 4 is the last element - the survivor!
The above link about the "base" kata description will give you a more thorough insight about the origin of this kind of permutation, but basically that's all that there is to know to solve this kata.

Notes and tips: using the solution to the other kata to check your function may be helpful, but as much larger numbers will be used, using an array/list to compute the number of the survivor may be too slow; you may assume that both n and k will always be >=1.

이문제는 요세푸스 문제를 통해서 마지막으로 살아남은 사람을 찾는문제이다
.. code-block:: python

    def josephus_survivor(n,k):
        #your code here
        circle = [i for i in range(1,n+1)]
        target = 0
        k-=1
        while len(circle) != 1:
            target = (target+k)%n
            circle.pop((target))
            n-=1
        return circle[0]

살해당한 사람의 위치가 다음 살해당할 사람에게 영향을 미치기 때문에 따로 target으로 변수를 할당하고
%연산자를 통하여 마지막 사람 index가 넘어가지 않도록했다.
그 후 pop으로 하나하나 관리하였다.

찾아보니 같은 요세푸스 문제가 있어서 하나 더 하였다.

Josephus Permutation
--------------------
This problem takes its name by arguably the most important event in the life of the ancient historian Josephus: according to his tale, he and his 40 soldiers were trapped in a cave by the Romans during a siege.

Refusing to surrender to the enemy, they instead opted for mass suicide, with a twist: they formed a circle and proceeded to kill one man every three, until one last man was left (and that it was supposed to kill himself to end the act).

Well, Josephus and another man were the last two and, as we now know every detail of the story, you may have correctly guessed that they didn't exactly follow through the original idea.

You are now to create a function that returns a Josephus permutation, taking as parameters the initial array/list of items to be permuted as if they were in a circle and counted out every k places until none remained.

Tips and notes: it helps to start counting from 1 up to n, instead of the usual range 0..n-1; k will always be >=1.

For example, with n=7 and k=3 josephus(7,3) should act this way.
::

    [1,2,3,4,5,6,7] - initial sequence
    [1,2,4,5,6,7] => 3 is counted out and goes into the result [3]
    [1,2,4,5,7] => 6 is counted out and goes into the result [3,6]
    [1,4,5,7] => 2 is counted out and goes into the result [3,6,2]
    [1,4,5] => 7 is counted out and goes into the result [3,6,2,7]
    [1,4] => 5 is counted out and goes into the result [3,6,2,7,5]
    [4] => 1 is counted out and goes into the result [3,6,2,7,5,1]
    [] => 4 is counted out and goes into the result [3,6,2,7,5,1,4]
So our final result is:
::

    josephus([1,2,3,4,5,6,7],3)==[3,6,2,7,5,1,4]

이 문제는 죽는 순서를 list로 만들어 출력하는 문제

.. code-block:: python

    def josephus(items,k):
        die=list()
        target = 0
        k-=1
        while len(items):
            target = (target+k)%len(items)
            die.append(items.pop((target)))
        return die

이번껀 input 데이터가 달라서 변경한것과
리턴해줘야할것이 list기때문에 append해서 리턴해주었다.

이번 두문제의 Bestpractice는 역시나 lambda식을 이용하여 짰다.