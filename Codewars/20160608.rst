Roman Numerals Encoder
======================

Create a function taking a positive integer as its parameter and returning a string containing the Roman Numeral representation of that integer.

Modern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending order: MDCLXVI.

Example:
::

    solution(1000) # should return 'M'
Help:
::

    Symbol    Value
    I          1
    V          5
    X          10
    L          50
    C          100
    D          500
    M          1,000
Remember that there can't be more than 3 identical symbols in a row.

More about roman numerals - http://en.wikipedia.org/wiki/Roman_numerals

이문제는 Arabic Numerals 를 Roman Numerals로 바꾸는 문제이다.

나는 다음과 같이 문제를 해결하였다

.. code-block:: python

    def solution(n):
        roman = [(1000,'M'),(500,'D'),(100,'C'),(50,'L'),(10,'X'),(5,'V'),(1,'I')]
        result = list()

        for i in range(0,len(roman),2) :
            x = int(n/roman[i][0])
            if roman[i][1] =='M':
                result.append(roman[i][1]*x)
            elif x >=4:
                if x ==4:
                    result.append(roman[i][1] + roman[i-1][1])
                elif x ==9:
                    result.append(roman[i][1] + roman[i-2][1])
                else:
                    result.append(roman[i-1][1] + roman[i][1]*(x-5))
            else:
                result.append(roman[i][1]*(x))
            n = n%roman[i][0]


        return ''.join(result)

자릿수별로 짤라서 값에 따라 Roman Numerals로 변환하는것
각 자리의 수가 4일땐 4에 맞춰서 9일땐 9에 맞추는 방법이다

Best Practices는 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1로 나누어서
n이 더 클때 해당하는 문자를 넣어 주고 숫자를 빼주었다.
확실히 Best Pracices가 비교문도 적고 효율이 좋은 소스같다.
