Efficient Power Modulo n
========================

Your task is to create a new implementation of modpow so that it computes (x^y)%n for large y. The problem with the current implementation is that the output of Math.pow is so large on our inputs that it won't fit in a 64-bit float.

You're also going to need to be efficient, because we'll be testing some pretty big numbers.
지수승의 모듈러 값을 구하는 문제이다.

이문제는 다음과 같이 해결했다.

.. code-block:: python

    def power_mod(x, y, n):
        # code here
        mod_list=[1]
        for i in range(1,y+1):
            if (mod_list[i-1]*x)%n!=1:
                mod_list.append(mod_list[i-1]*x%n)
            else:
                break

        return mod_list[y%len(mod_list)]

처음을 1로 두고 mod연산하며 반복되는 리스트를 찾아서 y를 리스트내의 몇번째인지 찾아서 리턴을 해주었다.

이 문제의 답은 나왔으나 codewars에서는 PERFORMANCE 에서 미달이되서 honor를 획득하지 못하였다.

다음은 bestpractice 이다.

.. code-block:: python

    def power_mod(b, e, m):
        res, b = 1, b % m
        while e > 0:
            if e & 1: res = res * b % m
            e >>= 1
            b = b * b % m
        return res

다른건 크게 차이가 나지 않았으나 for문을 쓰지않고 e>>=1 을 사용하여 e가 0이 될때까지 연산하였다.

아마 for문이 Performance에서 가장 큰 문제가 되지 않았나 싶다.