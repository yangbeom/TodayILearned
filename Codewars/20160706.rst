Lambdas as a mechanism for Open/Closed
======================================
Open/Closed Principle

The open/closed principle states that code should be closed for modification, yet open for extension. That means you should be able to add new functionality to an object or method without altering it.

One way to achieve this is by using a lambda, which by nature is lazily bound to the lexical context. Until you call a lambda, it is just a piece of data you can pass around.

Task at hand

Implement 3 lambdas that alter a message based on emotoion: ::

    spoken    = lambda greeting: ??? # "Hello."
    shouted   = lambda greeting: ??? # "HELLO!"
    whispered = lambda greeting: ??? # "hello."

Then create a fourth lambda, this one will take one of the above lambdas and a message, and the last lambda will delegate the emotion and the message up the chain. ::

    greet = lambda style, msg: ???

3가지 람다함수를 만들고 다른 람다함수로 3가지 람다함수를 이용하는것이다.

나는 각함수의 __name__에 이름을 주고 greet에서 style.__name__ 을 이용해서 마지막 부호를 붙였는데 bestpractice는 다음과 같았다.

.. code-block:: python

    spoken    = lambda greeting: greeting.title()+'.'
    shouted   = lambda greeting: greeting.upper()+'!'
    whispered = lambda greeting: greeting.lower()+'.'

    greet = lambda style, msg: style(msg)

title 함수는 title과 같이 첫문자만 대문자로 만드는 함수이다.

또한 나는 greet에서 map(style,msg)을 이용하여 함수와 문자를 연결시켰는데 그렇게 하지않고 style(msg)로 해결이 되었다.