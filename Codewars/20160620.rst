All that is open must be closed...
==================================
Background
----------
We all know about "balancing parentheses" (plus brackets, braces and chevrons) and even balancing characters that are identical.

Read that last sentence again, I balanced different characters and identical characters twice and you didn't even notice... :)

Kata
----
Your challenge in this kata is to write a piece of code to validate that a supplied string is balanced.

You must determine if all that is open is then closed, and nothing is closed which is not already open!

You will be given a string to validate, and a second string, where each pair of characters defines an opening and closing sequence that needs balancing.

You may assume that the second string always has an even number of characters.

오늘의 문제는 괄호가 재대로 다 닫혀있는지 아닌지를 확인하는 문제이다.

.. code-block:: python

    def is_balanced(source, caps):
        source_list = [source[x] for x in range(len(source)) if source[x] in caps]
        caps_list = [caps[x*2]+caps[x*2+1] for x in range(int(len(caps)/2))]

        for a in range(len(source_list)/2):
            for x in range(len(source_list)-1):
                if source_list[x]+source_list[x+1] in caps_list:
                    source_list.pop(x+1)
                    source_list.pop(x)
                    break
        return True if source_list == [] else False

나는 다음과 같이 짰다.
문자열에서 순서대로 괄호를 찾아내어 정해진 list에 맞으면 pop을 해서 지워나가는 식으로 했다.

bestpractice 에서는 다음과 같이 짰다.

.. code-block:: python

    def is_balanced(source, caps):
        source = filter(lambda x: x in caps, source)
        caps = dict(zip(caps[::2], caps[1::2]))
        stack = []
        for cap in source:
            if stack and cap == caps.get(stack[-1], ''): stack.pop()
            else: stack.append(cap)
        return not stack
caps를 dict로 key를 여는것 value를 닫는것으로 하고 stack에 넣었다가 빼면서 비교하였다.