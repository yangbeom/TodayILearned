Pyramid Slide Down
==================

Lyrics...

Pyramids are amazing! Both in architectural and mathematical sense. If you have a computer, you can mess with pyramids even if you are not in Egypt at the time. For example, let's consider the following problem. Imagine that you have a plane pyramid built of numbers, like this one here:

       /3/
      \7\ 4
     2 \4\ 6
    8 5 \9\ 3

Here comes the task...

Let's say that the 'slide down' is a sum of consecutive numbers from the top to the bottom of the pyramid. As you can see, the longest 'slide down' is 3 + 7 + 4 + 9 = 23

Your task is to write a function longestSlideDown (in ruby: longest_slide_down) that takes a pyramid representation as argument and returns its' longest 'slide down'. For example,
::

    longestSlideDown([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]])
    # => 23

By the way...

My tests include some extraordinarily high pyramides so as you can guess, brute-force method is a bad idea unless you have a few centuries to waste. You must come up with something more clever than that.

(c) This task is a lyrical version of the Problem 18 and/or Problem 67 on ProjectEuler.

문제를 너무 대충만들어서 힘들었던문제

마지막에 ProjectEuler 18번과 67번이라는걸 보고 어떤문제인지 찾아보고 알게 되었다.

문제는 다음과 같다 내려오는동안 가장 큰 숫자의합을 찾는것

.. code-block:: python

    def longest_slide_down(pyramid):
        for step in range(-1,-len(pyramid),-1):
            for i in range(0,len(pyramid[step])-1):
                pyramid[step-1][i]+=max(pyramid[step][i],pyramid[step][i+1])

        return pyramid[0][0]
나는 위와 같이 가장 아랫줄을 2개씩 비교하여 둘중 큰숫자를 그 위에 더해주었다.

.. code-block:: python

    def longest_slide_down(p):
        res = p.pop()
        while p:
            tmp = p.pop()
            res = [tmp[i] + max(res[i],res[i+1])  for i in range(len(tmp))]
        return res.pop()

이건 bestpractice 인데 인자값으로 list형식이 들어온다는것을 이용하여
pop을 써서 마지막줄을 가져오며 사용하였다
